import{_ as e,p as a,q as t,Z as i}from"./framework-eb6cfbb5.js";const r={},n=i(`<h1 id="http-的实体数据" tabindex="-1"><a class="header-anchor" href="#http-的实体数据" aria-hidden="true">#</a> HTTP 的实体数据</h1><h2 id="数据类型与编码-mime-type" tabindex="-1"><a class="header-anchor" href="#数据类型与编码-mime-type" aria-hidden="true">#</a> 数据类型与编码（MIME type）</h2><p>MIME 是一个很大的标准规范，但 HTTP 只使用了其中一部分，用来标记 body 的数据类型及 MIME type。（ HTTP 协议诞生之前，MIME 用在电子邮件系统，让电子邮件可以发送 ASCII 码以外的任意数据）</p><p>HTTP 常用类别：</p><ul><li>text： text/html（超文本）、text/plain（纯文本）、text/css（样式表）</li><li>image：image/gif、image/jpeg、image/png（图像文件）</li><li>audio/video：audio/mpeg、video/mp4 （音频和视频数据）</li><li>application：application/json、application/javascript、application/pdf（数据格式不固定，可能是文本也可能是二进制，必须由上层应用程序来解释）application/octet-stream，即不透明的二进制数据。</li></ul><p>Encoding type（节约带宽，压缩数据）：</p><ul><li>gzip：GNU zip 压缩格式，也是互联网上最流行的压缩格式</li><li>deflate：zlib（deflate）压缩格式，流行程度仅次于 gzip</li><li>br：一种专门为 HTTP 优化的新压缩算法（Brotli）</li></ul><h2 id="数据类型使用的头字段" tabindex="-1"><a class="header-anchor" href="#数据类型使用的头字段" aria-hidden="true">#</a> 数据类型使用的头字段</h2><p>内容协商：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Accept——Content-Type；Accept-Encoding——Content-Encoding
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://static001.geekbang.org/resource/image/51/b9/5191bce1329efa157a6cc37ab9e789b9.png" alt=""></p><h2 id="语言类型与编码" tabindex="-1"><a class="header-anchor" href="#语言类型与编码" aria-hidden="true">#</a> 语言类型与编码</h2><p>UTF-8 把世界上所有的语言都容纳在一种编码方案里，UTF-8 为互联网上的标准字符集。</p><h2 id="语言类型使用的头字段" tabindex="-1"><a class="header-anchor" href="#语言类型使用的头字段" aria-hidden="true">#</a> 语言类型使用的头字段</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Accept-Language: zh-CN, zh, en
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Content-Language: zh-CN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 HTTP 里使用的请求头字段是<strong>Accept-Charset</strong>，响应头在<strong>Content-Type</strong>字段的数据类型后面用“charset=xxx”来表示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Accept-Charset: gbk, utf-8
Content-Type: text/html; charset=utf-8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内容协商的质量值" tabindex="-1"><a class="header-anchor" href="#内容协商的质量值" aria-hidden="true">#</a> 内容协商的质量值</h2><p>“q”参数表示权重来设定优先级</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Accept: text/html,application/xml;q=0.9,*/*;q=0.8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="内容协商的结果" tabindex="-1"><a class="header-anchor" href="#内容协商的结果" aria-hidden="true">#</a> 内容协商的结果</h2><p><strong>Vary</strong>字段，记录服务器在内容协商时参考的请求头字段</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Vary: Accept-Encoding,User-Agent,Accept
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="http-传输大文件的方法" tabindex="-1"><a class="header-anchor" href="#http-传输大文件的方法" aria-hidden="true">#</a> HTTP 传输大文件的方法</h1><h2 id="数据压缩" tabindex="-1"><a class="header-anchor" href="#数据压缩" aria-hidden="true">#</a> 数据压缩</h2><p>Encoding, gzip 对文本文件压缩比较好。图片，音视频失效。</p><h2 id="分块传输" tabindex="-1"><a class="header-anchor" href="#分块传输" aria-hidden="true">#</a> 分块传输</h2><p>响应头：Transfer-Encoding: chunked。表示 body 分成了许多的块（chunk）逐个发送。（无法使用 Content-length<strong>互斥</strong>）</p><p>每个分块包含长度头和数据块两部分，均以回车换行结尾（\\r\\n），长度用 16 进制数字表示，最后一个长度为 0 的块表示结束。</p><p>浏览器会将接收的分块按照规则组装出的内容，无法看到原始报文形态。</p><p><img src="https://static001.geekbang.org/resource/image/25/10/25e7b09cf8cb4eaebba42b4598192410.png" alt=""></p><h2 id="范围请求" tabindex="-1"><a class="header-anchor" href="#范围请求" aria-hidden="true">#</a> 范围请求</h2><p>允许客户端在请求头里使用专用字段来表示只获取文件的一部分。<strong>客户端的“化整为零”</strong></p><p>服务器响应：<strong>Accept-Ranges: bytes</strong> （支持范围请求）HTTP/1.1 206 Partial Content</p><p>请求头：<strong>Range</strong>：<strong>bytes=x-y</strong>（ x 和 y 是以字节为单位的数据范围）</p><p><strong>服务器收到 Range 字段后，需要做四件事。</strong></p><ol><li>检查范围是否合法（越界）</li><li>范围正确，跟书 Range 计算偏移量</li><li>添加响应头字段 Content-Range：bytes x-y/length，范围/总长</li><li>发送数据</li></ol><p>视频拖拽进度、多段下载、断点续传基于范围请求实现，要点：</p><ol><li>先发 HEAD，看是都支持范围请求及资源大小</li><li>开 N 个线程，格局 Range 字段划分自己负责的任务，发送请求传输数据</li><li>下载意外中断，根据上次纪录用 Range 请求剩余资源</li></ol><h2 id="多段数据" tabindex="-1"><a class="header-anchor" href="#多段数据" aria-hidden="true">#</a> 多段数据</h2><p>多个范围请求，Range 请求头加多个 x-y，逗号分隔</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Range: bytes=0-9, 20-29
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>响应头需使用特殊 MIME 类型：<strong>multipart/byteranges</strong>，还需<strong>boundary=xxx</strong>参数给出分段间的标记</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Content-Type: multipart/byteranges; boundary=00000000001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="http-的连接管理" tabindex="-1"><a class="header-anchor" href="#http-的连接管理" aria-hidden="true">#</a> HTTP 的连接管理</h1><h2 id="短链接-http-早期-0-9-1-0" tabindex="-1"><a class="header-anchor" href="#短链接-http-早期-0-9-1-0" aria-hidden="true">#</a> 短链接（HTTP 早期 0.9/1.0）</h2><p>客户端与服务器端连接很短暂，不会与服务器保持长时间的连接状态。（建立和关闭 TCP 连接，成本昂贵）</p><p><img src="https://static001.geekbang.org/resource/image/54/0c/54315ed9ac37fbc6547258040f00a80c.png" alt=""></p><h2 id="长连接" tabindex="-1"><a class="header-anchor" href="#长连接" aria-hidden="true">#</a> 长连接</h2><p>将 TCP 的连接和关闭的时间由原来的一个“请求 - 应答”均摊到多个“请求 - 应答”上</p><p><img src="https://static001.geekbang.org/resource/image/57/b4/57b3d80234a1f1b8c538a376aa01d3b4.png" alt=""></p><h2 id="连接相关的头字段" tabindex="-1"><a class="header-anchor" href="#连接相关的头字段" aria-hidden="true">#</a> 连接相关的头字段</h2><p><strong>Connection: keep-alive</strong> 服务器响应字段说明支持长连接</p><p>Connection: close 长连接即将关闭</p><h2 id="队头阻塞" tabindex="-1"><a class="header-anchor" href="#队头阻塞" aria-hidden="true">#</a> 队头阻塞</h2><p>TTP 规定报文必须是“一发一收”，形成了先进先出的“串行”队列。队列里的请求没有轻重缓急的优先级，只有入队的先后顺序，排在最前面的请求被最优先处理。若队首的处理太慢，后续的请求也许一起等待。</p><p>通过“<strong>并发连接</strong>”（concurrent connections）缓解，也就是同时对一个域名发起多个长连接，用数量来解决质量的问题。</p><p><img src="https://static001.geekbang.org/resource/image/6a/72/6a6d30a89fb085d5f1773a887aaf5572.png" alt=""></p><h1 id="http-的重定向和跳转" tabindex="-1"><a class="header-anchor" href="#http-的重定向和跳转" aria-hidden="true">#</a> HTTP 的重定向和跳转</h1><h2 id="重定向的过程" tabindex="-1"><a class="header-anchor" href="#重定向的过程" aria-hidden="true">#</a> 重定向的过程</h2><p>浏览器的使用者主动发起的，可以称为“<strong>主动跳转</strong>”</p><p>由服务器来发起的，浏览器使用者无法控制，相对地就可以称为“<strong>被动跳转</strong>”</p><p>响应 3XX 状态码，响应字段 Location：/index.html，Location 为重定向 URI 可相对可绝对。如果跳转到站外必须绝对路径，还需要写 http://（协议名和固定分隔符）</p><h2 id="重定向状态码" tabindex="-1"><a class="header-anchor" href="#重定向状态码" aria-hidden="true">#</a> 重定向状态码</h2><p>301：永久重定向</p><p>302：临时重定向</p><h2 id="重定向的相关问题" tabindex="-1"><a class="header-anchor" href="#重定向的相关问题" aria-hidden="true">#</a> 重定向的相关问题</h2><p>性能损耗：重定向的机制决定了一个跳转会有两次请求 - 应答，比正常的访问多了一次。站内重定向还好说，可以长连接复用，站外重定向就要开两个连接，如果网络连接质量差，那成本可就高多了，会严重影响用户的体验。</p><p>循环跳转：A=&gt;B=&gt;C=&gt;A，HTTP 协议特别规定，浏览器必须具有检测“循环跳转”的能力</p><h1 id="http-的-cookie-机制" tabindex="-1"><a class="header-anchor" href="#http-的-cookie-机制" aria-hidden="true">#</a> HTTP 的 cookie 机制</h1><h2 id="cookie-的工作过程" tabindex="-1"><a class="header-anchor" href="#cookie-的工作过程" aria-hidden="true">#</a> Cookie 的工作过程</h2><p>服务器响应字段：Set-Cookie:key=value（每个字段对应一个键值对），浏览器收到响应报文拿到 cookie 值，再请求就是在请求头字段添加：Cookie：key=value；key=value（可发送多个键值对“；”隔开）</p><p><img src="https://static001.geekbang.org/resource/image/9f/a4/9f6cca61802d65d063e24aa9ca7c38a4.png" alt=""></p><h2 id="cookie-的属性" tabindex="-1"><a class="header-anchor" href="#cookie-的属性" aria-hidden="true">#</a> Cookie 的属性</h2><p><img src="https://static001.geekbang.org/resource/image/9d/5d/9dbb8b490714360475911ca04134df5d.png" alt=""></p><p>设置 Cookie 的作用域</p><ul><li><p><strong>Expires</strong> 过期时间为绝对时间点（截止时间）</p></li><li><p><strong>Max-Age</strong> 相对时间（秒）更加优先</p></li></ul><p>Cookie 的作用域（仅发送给特定的服务器和 URI）</p><ul><li><p><strong>Domain</strong> Cookie 所属域名</p></li><li><p><strong>Path</strong> 路径</p></li></ul><p>Cookie 的安全性</p><ul><li><p><strong>HttpOnly</strong>：只能通过浏览器 HTTP 协议传输（ 禁用 document.cookie ）</p></li><li><p><strong>SameSite</strong>：可以防范“跨站请求伪造”（XSRF）攻击（SameSite=Strict，SameSite=Lax 允许 GET/HEAD ）</p></li></ul><h1 id="http-的缓存控制" tabindex="-1"><a class="header-anchor" href="#http-的缓存控制" aria-hidden="true">#</a> HTTP 的缓存控制</h1><h2 id="服务器的缓存控制" tabindex="-1"><a class="header-anchor" href="#服务器的缓存控制" aria-hidden="true">#</a> 服务器的缓存控制</h2><p><img src="https://static001.geekbang.org/resource/image/a1/5b/a1968821f214df4a3ae16c9b30f99a5b.png" alt=""></p><p>响应头字段 Cache-Control</p><ul><li>max-age （秒）时间的计算起点是响应报文的创建时刻</li><li>no_store：<strong>不允许缓存</strong></li><li>no_cache：<strong>可以缓存</strong>，但在使用之前必须要去服务器验证是否过期，是否有最新的版本；</li><li>must-revalidate：如果缓存不过期就可以继续使用，但过期了如果还想用就必须去服务器验证。</li></ul><h2 id="客户端的缓存控制" tabindex="-1"><a class="header-anchor" href="#客户端的缓存控制" aria-hidden="true">#</a> 客户端的缓存控制</h2><p>“刷新”按钮的时候浏览器会在请求头里加一个“<strong>Cache-Control: max-age=0</strong>”</p><p>Ctrl+F5 的“强制刷新”是一个“<strong>Cache-Control: no-cache</strong>”的请求</p><h2 id="条件请求" tabindex="-1"><a class="header-anchor" href="#条件请求" aria-hidden="true">#</a> 条件请求</h2><p>验证资源是否失效需要使用“条件请求”，常用的是“if-Modified-Since”和“If-None-Match”，收到 304 就可以复用缓存里的资源；</p><p>验证资源是否被修改的条件有两个：“Last-modified”和“ETag”，需要服务器预先在响应报文里设置，搭配条件请求使用；</p><p><strong>if-Modified-Since</strong>：</p><p><strong>Last-modified</strong>：最后修改时间</p><p><img src="https://static001.geekbang.org/resource/image/b2/37/b239d0804be630ce182e24ea9e4ab237.png" alt=""></p><p><strong>If-None-Match</strong>：</p><p><strong>ETag</strong>：“实体标签”（Entity Tag）的缩写，<strong>是资源的一个唯一标识</strong>，主要是用来解决修改时间无法准确区分文件变化的问题。</p><p>If-Unmodified-Since</p><p>If-Match</p><p>If-Range</p><h1 id="http-的代理服务" tabindex="-1"><a class="header-anchor" href="#http-的代理服务" aria-hidden="true">#</a> HTTP 的代理服务</h1><h2 id="代理服务" tabindex="-1"><a class="header-anchor" href="#代理服务" aria-hidden="true">#</a> 代理服务</h2><p>HTTP 代理就是客户端和服务器通信链路中的一个中间环节，为两端提供“代理服务”，服务本身不生产内容，而是处于中间位置转发上下游的请求和响应，具有双重身份。</p><h2 id="代理的作用" tabindex="-1"><a class="header-anchor" href="#代理的作用" aria-hidden="true">#</a> 代理的作用</h2><p>对上屏蔽了真实客户端，对下屏蔽了真实服务器，简单的说就是“<strong>欺上瞒下</strong>”。</p><p>代理最基本的一个功能是<strong>负载均衡</strong>。负载均衡算法比如轮询、一致性哈希等等，这些算法的目标都是尽量把外部的流量合理地分散到多台源服务器，提高系统的整体资源利用率和性能。</p><ul><li><strong>健康检查</strong>：使用“心跳”等机制监控后端服务器，发现有故障就及时“踢出”集群，保证服务高可用；</li><li><strong>安全防护</strong>：保护被代理的后端服务器，限制 IP 地址或流量，抵御网络攻击和过载；</li><li><strong>加密卸载</strong>：对外网使用 SSL/TLS 加密通信认证，而在安全的内网不加密，消除加解密成本；</li><li><strong>数据过滤</strong>：拦截上下行的数据，任意指定策略修改请求或者响应；</li><li><strong>内容缓存</strong>：暂存、复用服务器响应</li></ul><h2 id="代理相关头字段" tabindex="-1"><a class="header-anchor" href="#代理相关头字段" aria-hidden="true">#</a> 代理相关头字段</h2><p>Via （通用字段）：标明代理的身份。</p><p><img src="https://static001.geekbang.org/resource/image/52/d7/52a3bd760584972011f6be1a5258e2d7.png" alt=""></p><p><strong>X-Forwarded-For</strong>（为谁而转发）：经过一个代理节点就会在字段里追加一个信息（代理主机名）</p><p><strong>X-Real-IP</strong>：记录客户端 IP 地址，没有中间的代理信息</p><p>代理与客户端、源服务器的通信过程：</p><ol><li>客户端 55061 先用三次握手连接到代理的 80 端口，然后发送 GET 请求；</li><li>代理不直接生产内容，所以就代表客户端，用 55063 端口连接到源服务器，也是三次握手；</li><li>代理成功连接源服务器后，发出了一个 HTTP/1.0 的 GET 请求；</li><li>因为 HTTP/1.0 默认是短连接，所以源服务器发送响应报文后立即用四次挥手关闭连接；</li><li>代理拿到响应报文后再发回给客户端，完成了一次代理服务。</li></ol><p><img src="https://static001.geekbang.org/resource/image/5a/54/5a247e9e5bf66f5ac3316fddf4e2b254.png" alt=""></p><h1 id="http-的缓存代理" tabindex="-1"><a class="header-anchor" href="#http-的缓存代理" aria-hidden="true">#</a> HTTP 的缓存代理</h1><h2 id="缓存代理服务" tabindex="-1"><a class="header-anchor" href="#缓存代理服务" aria-hidden="true">#</a> 缓存代理服务</h2><p><img src="https://static001.geekbang.org/resource/image/5e/c2/5e8d10b5758685850aeed2a473a6cdc2.png" alt=""></p><h2 id="源服务器的缓存控制-cache-control" tabindex="-1"><a class="header-anchor" href="#源服务器的缓存控制-cache-control" aria-hidden="true">#</a> 源服务器的缓存控制（ Cache-Control）</h2><p>服务器端 Cache-Control：max-age、no_store、no_cache 和 must-revalidate 可以约束客户端，也可以约束代理。</p><p>“<strong>private</strong>”表示缓存只能在客户端保存，是用户“私有”的，不能放在代理上与别人共享。</p><p>“<strong>public</strong>”的意思就是缓存完全开放。</p><p>缓存失效后的重新验证区分开（即使用条件请求“Last-modified”和“ETag”），“<strong>must-revalidate</strong>”是只要过期就必须回源服务器验证，而新的“<strong>proxy-revalidate</strong>”只要求代理的缓存过期后必须验证，客户端不必回源，只验证到代理这个环节就行了。</p><p>缓存的生存时间“<strong>s-maxage</strong>”，只限定在代理上能够存多久。</p><p>代理专用的属性<strong>no-transform</strong> 不能对转换响应资源的格式</p><h2 id="客户端的缓存控制-cache-control" tabindex="-1"><a class="header-anchor" href="#客户端的缓存控制-cache-control" aria-hidden="true">#</a> 客户端的缓存控制（ Cache-Control）</h2><p>缓存的生存时间，多了两个新属性“<strong>max-stale</strong>”和“<strong>min-fresh</strong>”。max-stale”的意思是如果代理上的缓存过期了也可以接受，但不能过期太多，超过 x 秒也会不要。“min-fresh”的意思是缓存必须有效，而且必须在 x 秒后依然有效</p><p>请求字段<strong>only-if-cached</strong>：只接受代理缓存的数据，不接受源服务器的响应</p>`,129),s=[n];function d(o,h){return a(),t("div",null,s)}const p=e(r,[["render",d],["__file","HTTPjinjiepian.html.vue"]]);export{p as default};
