import{_ as t,p as e,q as a,Z as s}from"./framework-eb6cfbb5.js";const r={},d=s(`<h1 id="_1、连接-mysql" tabindex="-1"><a class="header-anchor" href="#_1、连接-mysql" aria-hidden="true">#</a> 1、连接 Mysql</h1><p>格式： mysql -h 主机地址 -u 用户名 －p 用户密码</p><p><strong>1、连接到本机上的 MYSQL。</strong> 首先打开 DOS 窗口，然后进入目录 mysql\\bin，再键入命令 mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。</p><p>如果刚安装好 MYSQL，超级用户 root 是没有密码的，故直接回车即可进入到 MYSQL 中了，MYSQL 的提示符是： mysql&gt;</p><p>**2、连接到远程主机上的 MYSQL。**假设远程主机的 IP 为：110.110.110.110，用户名为 root,密码为 abcd123。则键入以下命令： mysql -h110.110.110.110 -u root -p 123;（注:u 与 root 之间可以不用加空格，其它也一样）</p><p><strong>3、退出 MYSQL 命令</strong>： exit （回车）</p><h1 id="_2、修改密码" tabindex="-1"><a class="header-anchor" href="#_2、修改密码" aria-hidden="true">#</a> 2、修改密码</h1><p>格式：mysqladmin -u 用户名 -p 旧密码 password 新密码</p><p><strong>1、给 root 加个密码 ab12。</strong> 首先在 DOS 下进入目录 mysql\\bin，然后键入以下命令 mysqladmin -u root -password ab12 注：因为开始时 root 没有密码，所以-p 旧密码一项就可以省略了。</p><p><strong>2、再将 root 的密码改为 djg345。</strong> mysqladmin -u root -p ab12 password djg345</p><h1 id="_3、增加新用户" tabindex="-1"><a class="header-anchor" href="#_3、增加新用户" aria-hidden="true">#</a> 3、增加新用户</h1><p>注意：和上面不同，下面的因为是 MYSQL 环境中的命令，所以后面都带一个分号作为命令结束符</p><p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p><p><strong>1、增加一个用户 test1 密码为 abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用 root 用户连入 MYSQL，然后键入以下命令：</strong> grant select,insert,update,delete on <em>.</em> to [email=test1@”%]test1@”%[/email]” Identified by “abc”;</p><p>但增加的用户是十分危险的，你想如某个人知道 test1 的密码，那么他就可以在 internet 上的任何一台电脑上登录你的 mysql 数据库并对你的数据可以为所欲为了，解决办法见 2。</p><p><strong>2、增加一个用户 test2 密码为 abc,让他只可以在 localhost 上登录，并可以对数据库 mydb 进行查询、插入、修改、删除的操作（localhost 指本地主机，即 MYSQL 数据库所在的那台主机）</strong>，这样用户即使用知道 test2 的密码，他也无法从 internet 上直接访问数据库，只能通过 MYSQL 主机上的 web 页来访问了。 grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “abc”;</p><p>如果你不想 test2 有密码，可以再打一个命令将密码消掉。 grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “”;</p><h1 id="_4-1-创建数据库" tabindex="-1"><a class="header-anchor" href="#_4-1-创建数据库" aria-hidden="true">#</a> 4.1 创建数据库</h1><p>注意：创建数据库之前要先连接 Mysql 服务器</p><p>命令：create database &lt;数据库名&gt;</p><p><strong>例 1：建立一个名为 xhkdb 的数据库</strong> mysql&gt; create database xhkdb;</p><p><strong>例 2：创建数据库并分配用户</strong></p><p>①CREATE DATABASE 数据库名;</p><p>②GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON 数据库名.* TO 数据库名@localhost IDENTIFIED BY &#39;密码&#39;;</p><p>③SET PASSWORD FOR &#39;数据库名&#39;@&#39;localhost&#39; = OLD_PASSWORD(&#39;密码&#39;);</p><p>依次执行 3 个命令完成数据库创建。注意：中文 “密码”和“数据库”是户自己需要设置的。</p><h1 id="_4-2-显示数据库" tabindex="-1"><a class="header-anchor" href="#_4-2-显示数据库" aria-hidden="true">#</a> 4.2 显示数据库</h1><p>命令：show databases （注意：最后有个 s） mysql&gt; show databases;</p><p>注意：为了不再显示的时候乱码，要修改数据库默认编码。以下以 GBK 编码页面为例进行说明：</p><p>**1、修改 MYSQL 的配置文件：**my.ini 里面修改 default-character-set=gbk <strong>2、代码运行时修改：</strong> ①Java 代码：jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk ②PHP 代码：header(&quot;Content-Type:text/html;charset=gb2312&quot;); ③C 语言代码：int mysql*set_character_set( MYSQL * mysql, char _ csname)； 该函数用于为当前连接设置默认的字符集。字符串 csname 指定了 1 个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与 SET NAMES 语句类似，但它还能设置 mysql- &gt; charset 的值，从而影响了由 mysql_real_escape_string() 设置的字符集。</p><h1 id="_4-3-删除数据库" tabindex="-1"><a class="header-anchor" href="#_4-3-删除数据库" aria-hidden="true">#</a> 4.3 删除数据库</h1><p>命令：drop database &lt;数据库名&gt; 例如：删除名为 xhkdb 的数据库 mysql&gt; drop database xhkdb;</p><p>例子 1：删除一个已经确定存在的数据库 mysql&gt; drop database drop_database; Query OK, 0 rows affected (0.00 sec)</p><p>例子 2：删除一个不确定存在的数据库 mysql&gt; drop database drop_database; ERROR 1008 (HY000): Can&#39;t drop database &#39;drop_database&#39;; database doesn&#39;t exist //发生错误，不能删除&#39;drop_database&#39;数据库，该数据库不存在。 mysql&gt; drop database if exists drop_database; Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在 mysql&gt; create database drop_database; Query OK, 1 row affected (0.00 sec) mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误 Query OK, 0 rows affected (0.00 sec)</p><h1 id="_4-4-连接数据库" tabindex="-1"><a class="header-anchor" href="#_4-4-连接数据库" aria-hidden="true">#</a> 4.4 连接数据库</h1><p>命令： use &lt;数据库名&gt;</p><p>例如：如果 xhkdb 数据库存在，尝试存取它： mysql&gt; use xhkdb; 屏幕提示：Database changed</p><p>**use 语句可以通告 MySQL 把 db_name 数据库作为默认（当前）数据库使用，用于后续语句。**该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的 USE 语句： mysql&gt; USE db1; mysql&gt; SELECT COUNT(<em>) FROM mytable; # selects from db1.mytable mysql&gt; USE db2; mysql&gt; SELECT COUNT(</em>) FROM mytable; # selects from db2.mytable</p><p>**使用 USE 语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。**下面的例子可以从 db1 数据库访问作者表，并从 db2 数据库访问编辑表： mysql&gt; USE db1; mysql&gt; SELECT author_name,editor_name FROM author,db2.editor -&gt; WHERE author.editor_id = db2.editor.editor_id;</p><p>USE 语句被设立出来，用于与 Sybase 相兼容。</p><p>有些网友问到，连接以后怎么退出。其实，不用退出来，use 数据库后，使用 show databases 就能查询所有数据库，如果想跳到其他数据库，用 use 其他数据库名字 就可以了。</p><h1 id="_4-5-当前选择的数据库" tabindex="-1"><a class="header-anchor" href="#_4-5-当前选择的数据库" aria-hidden="true">#</a> 4.5 当前选择的数据库</h1><p>命令：mysql&gt; select database();</p><p>MySQL 中 SELECT 命令类似于其他编程语言里的 print 或者 write，你可以用它来显示一个字符串、数字、数学表达式的结果等等。如何使用 MySQL 中 SELECT 命令的特殊功能？</p><p><strong>1.显示 MYSQL 的版本</strong> mysql&gt; select version(); +-----------------------+ | version() | +-----------------------+ | 6.0.4-alpha-community | +-----------------------+ 1 row in set (0.02 sec)</p><p><strong>2. 显示当前时间</strong> mysql&gt; select now(); +---------------------+ | now() | +---------------------+ | 2009-09-15 22:35:32 | +---------------------+ 1 row in set (0.04 sec)</p><p><strong>3. 显示年月日</strong> SELECT DAYOFMONTH(CURRENT_DATE); +--------------------------+ | DAYOFMONTH(CURRENT_DATE) | +--------------------------+ | 15 | +--------------------------+ 1 row in set (0.01 sec)</p><p>SELECT MONTH(CURRENT_DATE); +---------------------+ | MONTH(CURRENT_DATE) | +---------------------+ | 9 | +---------------------+ 1 row in set (0.00 sec)</p><p>SELECT YEAR(CURRENT_DATE); +--------------------+ | YEAR(CURRENT_DATE) | +--------------------+ | 2009 | +--------------------+ 1 row in set (0.00 sec)</p><p><strong>4. 显示字符串</strong> mysql&gt; SELECT &quot;welecome to my blog!&quot;; +----------------------+ | welecome to my blog! | +----------------------+ | welecome to my blog! | +----------------------+ 1 row in set (0.00 sec)</p><p><strong>5. 当计算器用</strong> select ((4 _ 4) / 10 ) + 25; +----------------------+ | ((4 _ 4) / 10 ) + 25 | +----------------------+ | 26.60 | +----------------------+ 1 row in set (0.00 sec)</p><p><strong>6. 串接字符串</strong> select CONCAT(f_name, &quot; &quot;, l_name) AS Name from employee_data where title = &#39;Marketing Executive&#39;; +---------------+ | Name | +---------------+ | Monica Sehgal | | Hal Simlai | | Joseph Irvine | +---------------+ 3 rows in set (0.00 sec) 注意：这里用到 CONCAT()函数，用来把字符串串接起来。另外，我们还用到以前学到的 AS 给结果列&#39;CONCAT(f_name, &quot; &quot;, l_name)&#39;起了个假名。</p><h1 id="_5-1-创建数据表" tabindex="-1"><a class="header-anchor" href="#_5-1-创建数据表" aria-hidden="true">#</a> 5.1 创建数据表</h1><p>命令：create table &lt;表名&gt; ( &lt;字段名 1&gt; &lt;类型 1&gt; [,..&lt;字段名 n&gt; &lt;类型 n&gt;]);</p><p>例如，建立一个名为 MyClass 的表，</p><table><thead><tr><th>字段名</th><th>数字类型</th><th>数据宽度</th><th>是否为空</th><th>是否主键</th><th>自动增加</th><th>默认值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>4</td><td>否</td><td>primary key</td><td>auto_increment</td><td></td></tr><tr><td>name</td><td>char</td><td>20</td><td>否</td><td></td><td></td><td></td></tr><tr><td>sex</td><td>int</td><td>4</td><td>否</td><td></td><td></td><td>0</td></tr><tr><td>degree</td><td>double</td><td>16</td><td>是</td><td></td><td></td><td></td></tr></tbody></table><p>mysql&gt; **create**<strong>table</strong> MyClass( &gt; id int(4) not null <strong>primary key auto_increment</strong>, &gt; name char(20) not null, &gt; sex int(4) not null **default** &#39;0&#39;, &gt; degree double(16,2));</p><h1 id="_5-3-删除数据表" tabindex="-1"><a class="header-anchor" href="#_5-3-删除数据表" aria-hidden="true">#</a> 5.3 删除数据表</h1><p>命令：drop table &lt;表名&gt;</p><p>例如：删除表名为 MyClass 的表 mysql&gt; drop table MyClass;</p><p>DROP TABLE 用于取消一个或多个表。您必须有每个表的 DROP 权限。所有的表数据和表定义会被取消，所以使用本语句要小心！</p><p>注意：对于一个带分区的表，DROP TABLE 会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。DROP TABLE 还会取消与被取消的表有关联的分区定义（.par）文件。</p><p>对与不存在的表，使用 IF EXISTS 用于防止错误发生。当使用 IF EXISTS 时，对于每个不存在的表，会生成一个 NOTE。</p><p>RESTRICT 和 CASCADE 可以使分区更容易。目前，RESTRICT 和 CASCADE 不起作用。</p><h1 id="_5-4-表插入数据" tabindex="-1"><a class="header-anchor" href="#_5-4-表插入数据" aria-hidden="true">#</a> 5.4 表插入数据</h1><p>命令：insert into &lt;表名&gt; [( &lt;字段名 1&gt;[,..&lt;字段名 n &gt; ])] values ( 值 1 )[, ( 值 n )]</p><p>例如：往表 MyClass 中插入二条记录, 这二条记录表示：编号为 1 的名为 Tom 的成绩为 96.45, 编号为 2 的名为 Joan 的成绩为 82.99， 编号为 3 的名为 Wang 的成绩为 96.5。 mysql&gt; insert into MyClass values(1,&#39;Tom&#39;,96.45),(2,&#39;Joan&#39;,82.99), (2,&#39;Wang&#39;, 96.59);</p><p>注意：insert into 每次只能向表中插入一条记录。</p><h1 id="_5-5-查询表中的数据" tabindex="-1"><a class="header-anchor" href="#_5-5-查询表中的数据" aria-hidden="true">#</a> 5.5 查询表中的数据</h1><p><strong>1)、查询所有行</strong> 命令： select &lt;字段 1，字段 2，...&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt; 例如：查看表 MyClass 中所有数据 mysql&gt; select * from MyClass;</p><p><strong>2）、查询前几行数据</strong> 例如：查看表 MyClass 中前 2 行数据 mysql&gt; select * from MyClass order by id limit 0,2;</p><p>select 一般配合 where 使用，以查询更精确更复杂的数据。</p><h1 id="_5-6-删除表中数据" tabindex="-1"><a class="header-anchor" href="#_5-6-删除表中数据" aria-hidden="true">#</a> 5.6 删除表中数据</h1><p>命令：delete from 表名 where 表达式</p><p>例如：删除表 MyClass 中编号为 1 的记录 mysql&gt; delete from MyClass where id=1;</p><p>下面是一个删除数据前后表的对比。</p><table><thead><tr><th>FirstName</th><th>LastName</th><th>Age</th></tr></thead><tbody><tr><td>Peter</td><td>Griffin</td><td>35</td></tr><tr><td>Glenn</td><td>Quagmire</td><td>33</td></tr></tbody></table><p>下面以 PHP 代码为例删除 &quot;Persons&quot; 表中所有 LastName=&#39;Griffin&#39; 的记录：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;?php
   $con = mysql_connect(&quot;localhost&quot;,&quot;peter&quot;,&quot;abc123&quot;);
   if (!$con)
   {
      die(&#39;Could not connect: &#39; . mysql_error());
   }
   mysql_select_db(&quot;my_db&quot;, $con);
   mysql_query(&quot;DELETE FROM Persons WHERE LastName=&#39;Griffin&#39;&quot;); mysql_close($con);
?&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这次删除之后，表是这样的：</p><table><thead><tr><th>FirstName</th><th>LastName</th><th>Age</th></tr></thead><tbody><tr><td>Glenn</td><td>Quagmire</td><td>33</td></tr></tbody></table><h1 id="_5-7-修改表中数据" tabindex="-1"><a class="header-anchor" href="#_5-7-修改表中数据" aria-hidden="true">#</a> 5.7 修改表中数据</h1><p>语法：update 表名 set 字段=新值,… where 条件 mysql&gt; update MyClass set name=&#39;Mary&#39; where id=1;</p><p><strong>例子 1：单表的 MySQL UPDATE 语句：</strong> UPDATE [LOW_PRIORITY] [IGNORE] tbl_name SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]</p><p><strong>例子 2：多表的 UPDATE 语句：</strong> UPDATE [LOW_PRIORITY] [IGNORE] table_references SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition]</p><p>UPDATE 语法可以用新值更新原有表行中的各列。SET 子句指示要修改哪些列和要给予哪些值。WHERE 子句指定应更新哪些行。如果没有 WHERE 子句，则更新所有的行。如果指定了 ORDER BY 子句，则按照被指定的顺序对行进行更新。LIMIT 子句用于给定一个限值，限制可以被更新的行的数目。</p><h1 id="_5-8-增加字段" tabindex="-1"><a class="header-anchor" href="#_5-8-增加字段" aria-hidden="true">#</a> 5.8 增加字段</h1><p>命令：<strong>alter table</strong> 表名 <strong>add</strong>字段 类型 其他; 例如：在表 MyClass 中添加了一个字段 passtest，类型为 int(4)，默认值为 0 mysql&gt; <strong>alter table</strong> MyClass <strong>add</strong> passtest <strong>int(<strong>4</strong>) default</strong> &#39;0&#39;</p><p><strong>加索引</strong> mysql&gt; alter table 表名 add index 索引名 (字段名 1[，字段名 2 …]); 例子： mysql&gt; alter table employee add index emp_name (name);</p><p><strong>加主关键字的索引</strong> mysql&gt; alter table 表名 add primary key (字段名); 例子： mysql&gt; alter table employee add primary key(id);</p><p><strong>加唯一限制条件的索引</strong> mysql&gt; alter table 表名 add unique 索引名 (字段名); 例子： mysql&gt; alter table employee add unique emp_name2(cardnumber);</p><p><strong>删除某个索引</strong> mysql&gt; alter table 表名 drop index 索引名; 例子： mysql&gt;alter table employee drop index emp_name;</p><p><strong>增加字段：</strong> mysql&gt; ALTER TABLE table_name ADD field_name field_type;</p><p><strong>修改原字段名称及类型：</strong> mysql&gt; ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;</p><p><strong>删除字段：</strong> MySQL ALTER TABLE table_name DROP field_name;</p><h1 id="_5-9-修改表名" tabindex="-1"><a class="header-anchor" href="#_5-9-修改表名" aria-hidden="true">#</a> 5.9 修改表名</h1><p>命令：rename table 原表名 to 新表名;</p><p>例如：在表 MyClass 名字更改为 YouClass mysql&gt; rename table MyClass to YouClass;</p><p>当你执行 RENAME 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 ALTER 和 DROP 权限，以及对新表的 CREATE 和 INSERT 权限。</p><p>如果在多表更名中，MySQL 遭遇到任何错误，它将对所有被更名的表进行倒退更名，将每件事物退回到最初状态。</p><p>RENAME TABLE 在 MySQL 3.23.23 中被加入。</p><h1 id="_6、备份数据库" tabindex="-1"><a class="header-anchor" href="#_6、备份数据库" aria-hidden="true">#</a> 6、备份数据库</h1><p>命令在 DOS 的[url=file://\\mysql\\bin]\\mysql\\bin[/url]目录下执行</p><p><strong>1.导出整个数据库</strong> 导出文件默认是存在 mysql\\bin 目录下 mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名 mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql</p><p><strong>2.导出一个表</strong> mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名 mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql</p><p><strong>3.导出一个数据库结构</strong> mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql -d 没有数据 –add-drop-table 在每个 create 语句之前增加一个 drop table</p><p><strong>4.带语言参数导出</strong> mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql</p><p>例如，将 aaa 库备份到文件 back_aaa 中： 　　[root@test1 root]# cd 　/home/data/mysql 　　[root@test1 mysql]# mysqldump -u root -p --opt aaa &gt; back_aaa</p><h1 id="_7-1-一个建库和建表的实例-1" tabindex="-1"><a class="header-anchor" href="#_7-1-一个建库和建表的实例-1" aria-hidden="true">#</a> 7.1 一个建库和建表的实例 1</h1><p>drop database if exists school; //如果存在 SCHOOL 则删除 create database school; //建立库 SCHOOL use school; //打开库 SCHOOL create table teacher //建立表 TEACHER ( id int(3) auto_increment not null primary key, name char(10) not null, address varchar(50) default ‘深圳’, year date ); //建表结束</p><p>//以下为插入字段 insert into teacher values(”,’allen’,&#39;大连一中’,&#39;1976-10-10′); insert into teacher values(”,’jack’,&#39;大连二中’,&#39;1975-12-23′);</p><p>如果你在 mysql 提示符键入上面的命令也可以，但不方便调试。 1、你可以将以上命令原样写入一个文本文件中，假设为 school.sql，然后复制到 c:\\下，并在 DOS 状态进入目录[url=file://\\mysql\\bin]\\mysql\\bin[/url]，然后键入以下命令： mysql -uroot -p 密码 &lt; c:\\school.sql 如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</p><p>2、或者进入命令行后使用 mysql&gt; source c:\\school.sql; 也可以将 school.sql 文件导入数据库中。</p><h1 id="_7-2-一个建库和建表的实例-2" tabindex="-1"><a class="header-anchor" href="#_7-2-一个建库和建表的实例-2" aria-hidden="true">#</a> 7.2 一个建库和建表的实例 2</h1><p>drop database if exists school; //如果存在 SCHOOL 则删除 create database school; //建立库 SCHOOL use school; //打开库 SCHOOL create table teacher //建立表 TEACHER ( id int(3) auto_increment not null primary key, name char(10) not null, address varchar(50) default &#39;&#39;深圳&#39;&#39;, year date ); //建表结束</p><p>//以下为插入字段 insert into teacher values(&#39;&#39;&#39;&#39;,&#39;&#39;glchengang&#39;&#39;,&#39;&#39;深圳一中&#39;&#39;,&#39;&#39;1976-10-10&#39;&#39;); insert into teacher values(&#39;&#39;&#39;&#39;,&#39;&#39;jack&#39;&#39;,&#39;&#39;深圳一中&#39;&#39;,&#39;&#39;1975-12-23&#39;&#39;);</p><p>注：在建表中 1、将 ID 设为长度为 3 的数字字段:int(3)；并让它每个记录自动加一:auto_increment；并不能为空:not null；而且让他成为主字段 primary key。</p><p>2、将 NAME 设为长度为 10 的字符字段</p><p>3、将 ADDRESS 设为长度 50 的字符字段，而且缺省值为深圳。</p><p>4、将 YEAR 设为日期字段。</p>`,120),n=[d];function l(o,i){return e(),a("div",null,n)}const h=t(r,[["render",l],["__file","Mysqlminglingxingzhiling.html.vue"]]);export{h as default};
