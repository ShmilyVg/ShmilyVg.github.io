import{_ as s,n,p as o,q as i,s as e,R as t,t as p,Z as r}from"./framework-eb6cfbb5.js";const c={},d=r('<h1 id="git-使用技巧" tabindex="-1"><a class="header-anchor" href="#git-使用技巧" aria-hidden="true">#</a> git 使用技巧</h1><p><strong>1：建立本地仓 test 并建立追踪关系，如果建立了本地仓也建立了追踪会修改追踪关系（ 建议使用）</strong></p><p><code>git branch --set-upstream test origin/master</code></p><p><strong>2: 建立 test 仓库 并建立追踪关系</strong></p><p><code>git branck --track test origin/develop</code></p><p><strong>3: 修改追踪关系</strong></p><p><strong>切换到 test</strong></p><p><code>git checkout test</code></p><p><strong>修改追踪仓库（一定要先切换）</strong></p><p><code>git branch --set-upstream-to origin/master</code></p><p><strong>4：另一个更为简洁的方式是初次 push 时，加入-u 参数</strong></p><p><code>git push -u origin develop</code></p><p><code>git push --set-upstream origin my_remote_branch_name</code></p><p><strong>这个操作在 push 的同时会指定当前分支的 upstream</strong></p><p><strong>查看本地分支及追踪的分支</strong></p><p><code>git branch -vv</code></p><p><strong>查看远程的分支</strong></p><h2 id="git-branch-a" tabindex="-1"><a class="header-anchor" href="#git-branch-a" aria-hidden="true">#</a> <code>git branch -a</code></h2><p>title: 常用正则表达式 date: 2020/05/28</p><hr><h1 id="git-版本回退的最佳方式" tabindex="-1"><a class="header-anchor" href="#git-版本回退的最佳方式" aria-hidden="true">#</a> git 版本回退的最佳方式</h1><p><strong>方式一：reset（不推荐）</strong></p><p>通过 reset 的方式，把 head 指针指向之前的某次提交，reset 之后，后面的版本就找不到了</p><p><img src="https://img2018.cnblogs.com/blog/1114289/201901/1114289-20190104171721230-1366009529.png" alt="img"></p><p>操作步骤如下：</p><p>1、在 gitlab 上找到要恢复的版本号，如：</p><p>139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96</p><p>2、在客户端执行如下命令（执行前，先将本地代码切换到对应分支）：</p><p>git reset --hard 139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96</p><p>3、强制 push 到对应的远程分支（如提交到 develop 分支）</p><p>git push -f -u origin develop</p><p>OK，现在到服务器上看到的代码就已经被还原回去了。这种操作存在一个问题，服务器上的代码虽然被还原了，但假如有多个人在使用，他们本地的版本依然是比服务器上的版本高的，所以，别人再重新提交代码的话，你撤销的操作又会被重新，你上面的操作也就白操作了。解决办法是，让别人把本地的分支先删掉，然后重新从服务器上拉取分支</p><p><strong>方式二：revert（推荐）</strong></p><p><strong>这种方式不会把版本往前回退，而是生成一个新的版本。所以，你只需要让别人更新一下代码就可以了，你之前操作的提交记录也会被保留下来</strong></p><p><strong><img src="https://img2018.cnblogs.com/blog/1114289/201901/1114289-20190104172250618-1810657676.png" alt="img"></strong></p><p>操作步骤如下：</p><p>1、在 gitlab 上找到要恢复的版本号</p><p>2、git revert -n 版本号</p><p>3、git commit -m xxxx 提交</p><h2 id="_4、git-push-推送到远程" tabindex="-1"><a class="header-anchor" href="#_4、git-push-推送到远程" aria-hidden="true">#</a> 4、git push 推送到远程</h2><p>title: 常用正则表达式 date: 2020/05/28</p><hr>',42),g={id:"推送指定分支到远程分支上",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#推送指定分支到远程分支上","aria-hidden":"true"},"#",-1),l={href:"https://www.cnblogs.com/everfight/p/git_push_local_branch.html",target:"_blank",rel:"noopener noreferrer"},b=r(`<p>如果你本地的分支名称和远程名称相同，则使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push origin branchName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果本地的分支跟远程的分支不一样，则指定本地和远程的分支的名称：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push origin localBranchName:remoteBranchName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4);function m(u,_){const a=n("ExternalLinkIcon");return o(),i("div",null,[d,e("h1",g,[h,t(),e("a",l,[t("推送指定分支到远程分支上"),p(a)])]),b])}const x=s(c,[["render",m],["__file","gitshiyongjiqiao.html.vue"]]);export{x as default};
