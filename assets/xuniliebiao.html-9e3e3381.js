import{_ as t,n as p,p as e,q as o,s as n,R as s,t as c,Z as l}from"./framework-eb6cfbb5.js";const i={},u=l(`<h1 id="虚拟列表是什么" tabindex="-1"><a class="header-anchor" href="#虚拟列表是什么" aria-hidden="true">#</a> 虚拟列表是什么</h1><p><code>虚拟列表</code>是按需显示的一种实现，即只对<code>可见区域</code>进行渲染，对<code>非可见区域</code>中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。</p><h1 id="虚拟列表解决的问题" tabindex="-1"><a class="header-anchor" href="#虚拟列表解决的问题" aria-hidden="true">#</a> 虚拟列表解决的问题</h1><p>当数据项目过多或结构太复杂时，渲染的时间会很长造成白屏，通过使用虚拟列表可解决此问题。</p><p>举个栗子</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 记录任务开始时间</span>
  <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 插入一万条数据</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token number">10000</span>
  <span class="token comment">// 获取容器</span>
  <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 将数据插入容器中</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
    li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total<span class="token punctuation">)</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;JS运行时间：&#39;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;总运行时间：&#39;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token comment">// print JS运行时间： 38</span>
  <span class="token comment">// print 总运行时间： 957</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击按钮后，会向页面中插入 10000 条数据，通过控制台的输出，可以得出 JS 运行时间 38ms，渲染完成后总运行时间 957ms</p><p>两次<code>console.log</code>的结果时间差异巨大原因：</p><ul><li>在 JS 的<code>Event Loop</code>中，当 JS 引擎所管理的执行栈中的事件以及所有微任务事件全部执行完后，才会触发渲染线程对页面进行渲染</li><li>第一个<code>console.log</code>的触发时间是在页面进行渲染之前，此时得到的间隔时间为 JS 运行所需要的时间</li><li>第二个<code>console.log</code>是放到 setTimeout 中的，它的触发时间是在渲染完成，在下一次<code>Event Loop</code>中执行的</li></ul><p>总的来说，是同步代码（首次执行可近似理解成宏任务执行机制）及任务队列里的微任务执行完毕后。然后将下一次异步的代码放入任务队列，开始渲染页面，再执行下一次任务队列放入执行栈。所以第一个 console 执行完后，开始渲染页面，渲染完毕后再将任务队列的任务执行，在执行第二个 console，渲染时间导致了 console 间的时间差。</p><h1 id="实现基本虚拟列表及动态高度虚拟列表" tabindex="-1"><a class="header-anchor" href="#实现基本虚拟列表及动态高度虚拟列表" aria-hidden="true">#</a> 实现基本虚拟列表及动态高度虚拟列表</h1>`,12),k={href:"https://gitee.com/lyw_vg/virtual-list",target:"_blank",rel:"noopener noreferrer"},r=n("h1",{id:"性能优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#性能优化","aria-hidden":"true"},"#"),s(" 性能优化")],-1);function d(m,v){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",k,[s("实现虚拟列表"),c(a)])]),r])}const g=t(i,[["render",d],["__file","xuniliebiao.html.vue"]]);export{g as default};
